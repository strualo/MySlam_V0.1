<launch>
  <include file="$(find plane_ground_filter)/launch/plane_ground_filter.launch"/>
  <!--<include file="$(find pointcloud_to_laserscan)/launch/pointcloud_to_laserscan.launch"/>-->
   <!--<include file="$(find ros_passthrough)/launch/passthrough.launch"/>-->
  <!--<include file="$(find cloud_to_map)/launch/cloud_to_map.launch"/>-->
  <include file="/home/zqt/blam/src/BLAM/blam_example/launch/octomap_server.launch"/>
  <!--- ************************************************************************ -->
  <arg name="bagfile" default="/usr/dataset/vlp16/zhinengzhizao.bag"/>
  <!-- 2018-09-01-16-dixiashi gongkong3lou.bag   lab_rotation  zhinengzhizao   maritime/erlouzoulang  luomazhu_fast -->
  <arg name="rate" default="1.0"/>
  <param name="/use_sim_time" value="false"/>   <!-- True for simulation, false for real-time and bagfiles -->

  <group ns="blam">
    <!-- SLAM -->
    <node pkg="blam_slam" name="blam_slam" type="blam_slam_node" output="screen">
      <!-- Topics -->
      <remap from="~pcld" to="/velodyne_points1"/>  <!--用滤除地面后的雷达数据建图这里是订阅velodyne_points1　　　　否则订阅velodyne_points　　详情见plane_ground_filter的launch文件-->
      <rosparam param="init">        <!-- Initial pose -->
        position: {x: 0.0, y: 0.0, z: 0.0}
        orientation: {roll: 0.0, pitch: 0.0, yaw: 0.0}
        position_sigma: {x: 0.1, y: 0.1, z: 0.1}
        orientation_sigma: {roll: 0.02, pitch: 0.02, yaw: 0.02}
      </rosparam>
      <!-- Rates -->
      <rosparam file="$(find blam_example)/config/blam_rates.yaml"/>
      <!-- Frames --> 
      <rosparam file="$(find blam_example)/config/blam_frames.yaml"/>xml
      <!-- Point cloud filter -->
      <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>
      <!-- Point cloud odometry -->
      <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>
      <!-- Point cloud localization -->
      <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>
      <!-- Point cloud mapper -->
      <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>
      <!-- Point cloud visualization -->
      <rosparam file="$(find point_cloud_visualizer)/config/parameters.yaml"/>
      <!-- Loop closure -->
      <rosparam file="$(find laser_loop_closure)/config/parameters.yaml"/>
    </node>
  </group>
  <node pkg="rosbag" type="play" name="play" args="-r $(arg rate) --clock $(arg bagfile)" output="screen" respawn="false" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_velodyne_tf_broadcaster" args="0 0 0 0 0 0 base velodyne" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find blam_example)/rviz/lidar_slam.rviz" required="true" />

</launch>


<!--

static_transform_publisher x y z yaw pitch roll frame_id child_frame_id

Publish a static coordinate transform to tf2 using an x/y/z offset in meters and yaw/pitch/roll in radians. (yaw is rotation about Z, pitch is rotation about Y, and roll is rotation about X).
static_transform_publisher x y z qx qy qz qw frame_id child_frame_id

Publish a static coordinate transform to tf2 using an x/y/z offset in meters and quaternion.


-->
